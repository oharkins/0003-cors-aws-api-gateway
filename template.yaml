AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template that creates resources used to host Ui
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Parameters:
  BucketName:
    Type: String
    Description: Name of the bucket used to host ui assets
  DomainName:
    Type: String
  HostedZoneId:
    Type: String

Globals:
  Api:
    Cors:
      AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
      AllowHeaders: "'Authorization,Content-Type,X-Api-Key'"
      AllowOrigin: "'*'"

Resources:

  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub cors.${DomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub cors.${DomainName}
          HostedZoneId: !Ref HostedZoneId

  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub cors.${DomainName}
      CertificateArn: !Ref APICertificate

  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref Api
      Stage: v1
      BasePath: api

  UiApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref UiApi
      Stage: v1

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub cors.${DomainName}
      Type: CNAME
      TTL: "3600"
      ResourceRecords:
        - !GetAtt ApiGatewayDomainName.DistributionDomainName

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Auth:
        DefaultAuthorizer: NONE
        AddDefaultAuthorizerToCorsPreflight: false
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml
      EndpointConfiguration:
        Type: REGIONAL
  UiApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: cors-ui
      BinaryMediaTypes:
        - '*/*'
      EndpointConfiguration:
        Types:
          - REGIONAL

  Deployment:
    DependsOn:
      - Bucket
      - GetMethod
      - ProxyGetMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref UiApi
      StageName: v1

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
        IgnorePublicAcls: false
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketName: !Sub ${BucketName}-${AWS::Region}-cors-ui
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              Fn::Sub:
                - 'arn:${AWS::Partition}:s3:::${Bucket}/*'
                - Bucket: !Ref Bucket
            Principal: '*'

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt UiApi.RootResourceId
      RestApiId: !Ref UiApi
      PathPart: '{proxy+}'

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt UiApi.RootResourceId
      RestApiId: !Ref UiApi
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.ETag: true
        - StatusCode: '304'
          ResponseParameters:
            method.response.header.ETag: true
      RequestParameters:
        method.request.header.Content-Type: true
        method.request.header.Accept: true
        method.request.header.If-None-Match: true
      Integration:
        RequestParameters:
          integration.request.header.Content-Type: method.request.header.Content-Type
          integration.request.header.Accept: method.request.header.Accept
          integration.request.header.If-None-Match: method.request.header.If-None-Match
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: !GetAtt Bucket.WebsiteURL
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.ETag: integration.response.header.ETag
          - StatusCode: '304'
            SelectionPattern: '304'
            ResponseParameters:
              method.response.header.ETag: integration.response.header.ETag

  ProxyGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref UiApi
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.ETag: true
            method.response.header.Cache-Control: true
        - StatusCode: '304'
          ResponseParameters:
            method.response.header.ETag: true
            method.response.header.Cache-Control: true
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.Content-Type: true
        method.request.header.Accept: true
        method.request.header.If-None-Match: true
      Integration:
        CacheKeyParameters:
          - method.request.path.proxy
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.Content-Type: method.request.header.Content-Type
          integration.request.header.Accept: method.request.header.Accept
          integration.request.header.If-None-Match: method.request.header.If-None-Match
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri:
          Fn::Sub:
            - ${WebsiteURL}/{proxy}
            - WebsiteURL: !GetAtt Bucket.WebsiteURL
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Cache-Control: "'must-revalidate'"
              method.response.header.ETag: integration.response.header.ETag
          - StatusCode: '304'
            SelectionPattern: '304'
            ResponseParameters:
              method.response.header.Cache-Control: "'must-revalidate'"
              method.response.header.ETag: integration.response.header.ETag

Outputs:
  BucketName:
    Description: Name of the bucket used to host ui assets
    Value: !Ref Bucket
  AppUiURL:
    Description: UI endpoint URL
    Value: !Sub >-
      https://${UiApi}.execute-api.${AWS::Region}.amazonaws.com/v1/
  AppURL:
    Description: UI endpoint URL
    Value: !Sub >-
      https://${Api}.execute-api.${AWS::Region}.amazonaws.com/v1/