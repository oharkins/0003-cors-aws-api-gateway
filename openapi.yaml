openapi: 3.0.0
info:
  title: CORS Demo
  version: 1.0.1
  description: CORS Demo

servers:
  - url: https://localhost/v1

paths:
  /echo:
    get:
      responses:
        '200':
          description: "Returns all parameters including path, querystring, header, stage variables, and context"
      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers
      x-amazon-apigateway-integration:
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
                ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
                #set($allParams = $input.params())
                {
                "body-json" : $input.json('$'),
                "params" : {
                #foreach($type in $allParams.keySet())
                    #set($params = $allParams.get($type))
                "$type" : {
                    #foreach($paramName in $params.keySet())
                    "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                        #if($foreach.hasNext),#end
                    #end
                }
                    #if($foreach.hasNext),#end
                #end
                },
                "stage-variables" : {
                #foreach($key in $stageVariables.keySet())
                "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                    #if($foreach.hasNext),#end
                #end
                },
                "context" : {
                    "account-id" : "$context.identity.accountId",
                    "api-id" : "$context.apiId",
                    "api-key" : "$context.identity.apiKey",
                    "authorizer-tenantId" : "$context.authorizer.tenantId",
                    "authorizer-principal-id" : "$context.authorizer.principalId",
                    "authorize_status" : "$context.authorize.status",
                    "caller" : "$context.identity.caller",
                    "context-authorizer-firstName" : "$context.authorizer.firstName",
                    "context-authorizer-lastName" : "$context.authorizer.lastName",
                    "context-authorizer-isActive" : "$context.authorizer.isActive",
                    "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                    "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                    "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                    "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                    "http-method" : "$context.httpMethod",
                    "stage" : "$context.stage",
                    "source-ip" : "$context.identity.sourceIp",
                    "user" : "$context.identity.user",
                    "user-agent" : "$context.identity.userAgent",
                    "user-arn" : "$context.identity.userArn",
                    "request-id" : "$context.requestId",
                    "resource-id" : "$context.resourceId",
                    "resource-path" : "$context.resourcePath"
                    }
                }
        requestTemplates:
          application/json: |
            #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')
            {
              "statusCode": 200
            }
        type: mock